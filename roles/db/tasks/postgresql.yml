---
- name: Install PostgreSQL packages
  become: true
  ansible.builtin.apt:
    name:
      - postgresql
      - python3-psycopg2
    state: present
    update_cache: true
  register: apt_install_result
  failed_when: >
    apt_install_result is failed and
    "No package matching 'postgresql'" not in apt_install_result.stderr

- name: Ensure PostgreSQL is started and enabled
  become: true
  ansible.builtin.service:
    name: postgresql
    state: started
    enabled: true

- name: Check PostgreSQL connection
  become: true
  community.postgresql.postgresql_ping:
    login_user: postgres
  register: postgresql_status
  ignore_errors: true

- name: Debug PostgreSQL status
  ansible.builtin.debug:
    var: postgresql_status

- name: Find pg_hba.conf
  become: true
  ansible.builtin.find:
    paths: /etc/postgresql
    patterns: pg_hba.conf
    recurse: yes
  register: find_pg_hba_result

- name: Debug pg_hba.conf location
  ansible.builtin.debug:
    var: find_pg_hba_result

- name: Set pg_hba_path fact
  ansible.builtin.set_fact:
    pg_hba_path: "{{ find_pg_hba_result.files[0].path }}"
  when: find_pg_hba_result.matched > 0

- name: Temporarily set postgres user authentication to trust (local only)
  become: true
  become_user: postgres
  ansible.builtin.lineinfile:
    path: "{{ pg_hba_path }}"
    regexp: '^local\s+all\s+postgres\s+peer'
    line: 'local all postgres trust'
    state: present
  notify: Restart postgresql
  when: ansible_connection == 'local' and find_pg_hba_result.matched > 0

- name: Create Ansible PostgreSQL user
  become: true
  community.postgresql.postgresql_user:
    name: "{{ db_user }}"
    # password: "{{ db_pass }}"
    priv: ALL
    state: present
  when: ansible_connection == 'local'

- name: Restore postgres user authentication to md5 (local only)
  become: true
  become_user: postgres
  ansible.builtin.lineinfile:
    path: "{{ pg_hba_path }}"
    regexp: '^local\s+all\s+postgres\s+trust'
    line: 'local all postgres md5'
    state: present
  notify: Restart postgresql
  when: ansible_connection == 'local' and find_pg_hba_result.matched > 0

- name: Create database
  become: true
  community.postgresql.postgresql_db:
    name: "{{ db_name }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_password }}"
    state: present
  when: ansible_connection == 'local'

- name: Add host-based access for db_user
  become: true
  become_user: postgres
  ansible.builtin.lineinfile:
    path: "{{ pg_hba_path }}"
    line: "host all {{ db_user }} 127.0.0.1/32 md5"
  notify: Restart postgresql