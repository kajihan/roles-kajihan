# This is a basic workflow to help you get started with Actions
name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DB_HOST: localhost
      DB_NAME: lrv
      DB_USER: lrv
      DB_PASS: ${{ secrets.GITHUB_TOKEN }}
      ANSIBLE_TMP_DIR: /home/runner/.ansible/tmp

    steps:
      - name: Prepare environment
        run: |
          echo "Working directory: $GITHUB_WORKSPACE"
          mkdir -p $ANSIBLE_TMP_DIR
          chmod 700 $ANSIBLE_TMP_DIR
          ls -ld $ANSIBLE_TMP_DIR

      - uses: actions/checkout@v4

      - name: Update apt
        run: sudo apt update

      - name: Install ufw
        run: sudo apt install ufw -y

      # Устанавливаем последнюю версию Ansible без указания конкретной версии
      - name: Setup Ansible
        run: python3 -m pip install --user ansible

      # Выводим установленную версию Ansible для отладки
      - name: Check Ansible version
        run: ansible --version

      - name: Set masked outputs
        run: |
          echo "::add-mask::$DB_HOST"
          echo "::add-mask::$DB_NAME"
          echo "::add-mask::$DB_USER"
          echo "::add-mask::$DB_PASS"

      - name: Check if the 'server' role is used
        run: |
          ansible-galaxy role info -p ./roles --offline server | grep 'Role: server' || echo "Role 'server' not found"

      - name: Check if the 'db' role is used
        run: |
          ansible-galaxy role info -p ./roles --offline db | grep 'Role: db' || echo "Role 'db' not found"

      - name: Run Ansible playbook
        run: |
          cat << EOF > hosts
          [server]
          localhost
          [db]
          localhost
          EOF
          ansible-playbook -i ./hosts main.yml -e "db_host=$DB_HOST db_name=$DB_NAME db_user=$DB_USER db_pass=$DB_PASS ansible_remote_tmp=$ANSIBLE_TMP_DIR" -c local -vvv
          
      - name: Test application
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./.github/tests

      - name: Test if application uses PostgreSQL
        run: |
          sudo apt-get install postgresql-client -y
          PGPASSWORD=$DB_PASS psql -h $DB_HOST -U $DB_USER -d $DB_NAME -c '\d' | grep users